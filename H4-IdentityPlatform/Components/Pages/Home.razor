@page "/"

@using H4_IdentityPlatform;
@using H4_IdentityPlatform.Data;
@using H4_IdentityPlatform.Components.Account;
@using Microsoft.AspNetCore.Identity;
@inject RoleManager<IdentityRole> RoleManager;
@inject UserManager<AuthUser> UserManager;

<PageTitle>Home</PageTitle>

<style>
    .accept, .deny {
        font-family: monospace;
        font-weight: bold;
    }

    .accept {
        color: forestgreen;
    }

    .deny {
        color: red;
    }



    .info-table, .info-tr, .info-td {
        border: 1px solid black;
    }

    .info-table {
        border-collapse: collapse;
    }

    .info-td {
        padding-left: 1em;
        padding-right: 1em;
    }
</style>

<AuthorizeView>
    <Authorized>
        <h3>User Info</h3>
        <table class="info-table">
            <tr class="info-tr">
                <td class="info-td">UserName</td>
                <td class="info-td">@name_str</td>
            </tr>
            <tr class="info-tr">
                <td class="info-td">Id</td>
                <td class="info-td">@id_str</td>
            </tr>

            <tr class="info-tr">
                <td class="info-td">Email</td>
                <td class="info-td">@mail_str</td>
            </tr>
            <tr class="info-tr">
                <td class="info-td">Roles</td>
                <td class="info-td">@roles_str</td>
            </tr>
            <tr class="info-tr">
                <td class="info-td">Admin</td>
                <td class="info-td">
                    <AuthorizeView Roles="AdminRole, AdminPolicy" Context="innerContext">
                        <Authorized>
                            <span class="accept">true</span>
                        </Authorized>

                        <NotAuthorized>
                            <span class="deny">false</span>
                        </NotAuthorized>
                    </AuthorizeView>
                </td>
            </tr>
        </table>
    </Authorized>

    <NotAuthorized>
        <span id="login-state" class="deny">@notLoggedInText</span>
    </NotAuthorized>
</AuthorizeView>




@code {
    public const string notLoggedInText = @"You are not logged in!";

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    Data.AuthUser? curUser;

    string id_str = "no user";
    string name_str = "no user";
    string mail_str = "no user";
    string roles_str = "";
    List<string> curUserRoles = new();
    protected async override Task OnInitializedAsync() {
        curUser = await UserManager.GetUserAsync(HttpContext.User);

        await EnsureRoles();
        await AssignRoleByUserName("admin@chungus.com", "AdminRole");

        if (this.curUser is not null) {
            id_str = curUser.Id;
            name_str = curUser.UserName ?? "null";
            mail_str = curUser.Email ?? "null";
            roles_str = string.Join(", ", await UserManager.GetRolesAsync(curUser));
        }

    }

    private static readonly string[] requiredRoles = new string[] { "AdminRole" };
    private async Task EnsureRole(string roleName) {
        bool roleExists = await RoleManager.RoleExistsAsync(roleName);
        if (!roleExists) {
            _ = await RoleManager.CreateAsync(new IdentityRole(roleName));

        }
    }
    private async Task EnsureRoles() {
        List<Task> ensureTasks = new();
        foreach (string roleName in requiredRoles) {
            ensureTasks.Add(EnsureRole(roleName));
        }
        foreach (Task ensureTask in ensureTasks) {
            await ensureTask;
        }
    }
    public async Task AssignRoleByUserName(string userName, string roleName) {
        Data.AuthUser? user = await UserManager.FindByUserName(userName);
        if (user is not null) {
            IdentityResult addRoleResult = await UserManager.AddToRoleAsync(user, roleName);
        }
    }
}